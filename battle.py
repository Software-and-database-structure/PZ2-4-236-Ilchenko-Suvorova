import random
import json
from typing import List, Dict, Any, Iterator
from core import Character
from characters import Boss

class TurnOrder:
    """–ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤"""
    
    def __init__(self, characters: List[Character]):
        self.characters = [c for c in characters if c.is_alive]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–æ–≤–∫–æ—Å—Ç–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è)
        self.characters.sort(key=lambda x: x.agility, reverse=True)
        self.index = 0
    
    def __iter__(self) -> Iterator[Character]:
        return self
    
    def __next__(self) -> Character:
        if not self.characters:
            raise StopIteration
        
        # –£–±–∏—Ä–∞–µ–º –º–µ—Ä—Ç–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        self.characters = [c for c in self.characters if c.is_alive]
        if not self.characters:
            raise StopIteration
        
        if self.index >= len(self.characters):
            self.index = 0
        
        character = self.characters[self.index]
        self.index += 1
        return character
    
    def add_character(self, character: Character):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        if character.is_alive and character not in self.characters:
            self.characters.append(character)
            self.characters.sort(key=lambda x: x.agility, reverse=True)

class BattleLogger:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—è"""
    
    def __init__(self, filename: str = "battle_log.txt"):
        self.filename = filename
        self.log_file = None
    
    def __enter__(self):
        self.log_file = open(self.filename, 'w', encoding='utf-8')
        self.log_file.write("=== –ù–ê–ß–ê–õ–û –ë–û–Ø ===\n")
        return self
    
    def log(self, message: str):
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        if self.log_file:
            self.log_file.write(message + '\n')
        print(message)
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.log_file:
            self.log_file.write("=== –ö–û–ù–ï–¶ –ë–û–Ø ===\n")
            self.log_file.close()

class Battle:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—è"""
    
    def __init__(self, party: List[Character], boss: Boss, seed: int = None):
        self.party = party
        self.boss = boss
        self.turn_order = TurnOrder(party + [boss])
        self.round = 1
        self.is_battle_over = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
        if seed is not None:
            random.seed(seed)
    
    def save_state(self, filename: str = "battle_save.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è –≤ JSON"""
        state = {
            'round': self.round,
            'party': [char.to_dict() for char in self.party],
            'boss': self.boss.to_dict(),
            'is_battle_over': self.is_battle_over
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=2, ensure_ascii=False)
    
    @classmethod
    def load_state(cls, filename: str = "battle_save.json"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è –∏–∑ JSON"""
        with open(filename, 'r', encoding='utf-8') as f:
            state = json.load(f)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        return state
    
    def check_battle_end(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ—è"""
        party_alive = any(char.is_alive for char in self.party)
        boss_alive = self.boss.is_alive
        
        if not party_alive:
            self.is_battle_over = True
            return True
        elif not boss_alive:
            self.is_battle_over = True
            return True
        
        return False
    
    def apply_start_of_turn_effects(self, character: Character):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        character.apply_effects()
        character.update_cooldowns()
    
    def run_turn(self, character: Character, logger: BattleLogger) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not character.is_alive:
            return False
        
        logger.log(f"\n--- –•–æ–¥ {character.name} ---")
        self.apply_start_of_turn_effects(character)
        
        if isinstance(character, Boss):
            # –•–æ–¥ –±–æ—Å—Å–∞
            action_result = character.choose_action(self.party)
            logger.log(action_result)
        else:
            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
            if character.skills and random.random() < 0.6 and character.mp > 10:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
                available_skills = [i for i, skill in enumerate(character.skills) 
                                  if skill.name not in character.cooldowns and character.mp >= skill.mp_cost]
                if available_skills:
                    skill_index = random.choice(available_skills)
                    action_result = character.use_skill(skill_index, [self.boss])
                    logger.log(action_result)
                else:
                    # –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
                    action_result = character.basic_attack(self.boss)
                    logger.log(action_result)
            else:
                # –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
                action_result = character.basic_attack(self.boss)
                logger.log(action_result)
        
        return self.check_battle_end()
    
    def run_battle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        with BattleLogger() as logger:
            logger.log(f"–ù–∞—á–∞–ª–æ –±–æ—è! –ü–∞—Ç–∏ –ø—Ä–æ—Ç–∏–≤ {self.boss.name}")
            logger.log(f"–£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞: {self.boss.level}")
            logger.log(f"HP –±–æ—Å—Å–∞: {self.boss.hp}/{self.boss.max_hp}")
            
            while not self.is_battle_over:
                logger.log(f"\n=== –†–∞—É–Ω–¥ {self.round} ===")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                for char in self.party:
                    if char.is_alive:
                        logger.log(f"{char.name}: HP {char.hp}/{char.max_hp}, MP {char.mp}/{char.max_mp}")
                
                logger.log(f"{self.boss.name}: HP {self.boss.hp}/{self.boss.max_hp}, MP {self.boss.mp}/{self.boss.max_mp}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
                for character in self.turn_order:
                    if self.run_turn(character, logger):
                        break
                
                if not self.is_battle_over:
                    self.round += 1
                
                # –ê–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Ä–∞—É–Ω–¥–æ–≤
                if self.round % 5 == 0:
                    self.save_state(f"battle_round_{self.round}.json")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if any(char.is_alive for char in self.party):
                logger.log(f"\nüéâ –ü–û–ë–ï–î–ê! {self.boss.name} –ø–æ–≤–µ—Ä–∂–µ–Ω!")
                return "party"
            else:
                logger.log(f"\nüíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! {self.boss.name} —É–Ω–∏—á—Ç–æ–∂–∏–ª –ø–∞—Ç–∏!")
                return "boss"